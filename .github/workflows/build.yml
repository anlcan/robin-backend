name: Build

on: [push]

env:
  DISTRIBUTION: 'corretto' # amazon version
  JAVA_VERSION: 21

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: ${{ env.DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
      - name: Run unit tests
        #run: mvn -s ${MAVEN_SETTINGS_FILE} clean test
        if: "!contains(github.event.head_commit.message, 'skip-test')"
        run: mvn clean verify # test vs verify? is clean necessary?
      - name: Create coverage report files
        if: "!contains(github.event.head_commit.message, 'skip-test')"
        run:
          mvn jacoco:report


      - name: Upload code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-file
          path: target/site/jacoco/jacoco.xml
      - name: Upload code openapi results
        uses: actions/upload-artifact@v2
        with:
          name: openapi
          path: target/openapi.json


  codacy-coverage-reporter:
    needs: unit-tests
    runs-on: ubuntu-latest
    name: Codacy code coverage upload
    steps:
      - uses: actions/checkout@master
      - name: Download code coverage report
        uses: actions/download-artifact@v2
        with:
          name: code-coverage-file
      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: jacoco.xml

  deploy-doc:
    needs: unit-tests
    name: Deploy API documentation on Bump
    runs-on: ubuntu-latest
    steps:
      - name: Download api documentations
        uses: actions/download-artifact@v2
        with:
          name: openapi
      - name: Deploy API documentation
        uses: bump-sh/github-action@v1
        with:
          doc: boilerplate
          token: ${{secrets.BUMP_TOKEN}}
          file: openapi.json

  build:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
            distribution: ${{ env.DISTRIBUTION }}
            java-version: ${{ env.JAVA_VERSION }}
      - name: Build Artifact by Maven
        run: mvn clean package -DskipTests=true

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
           registry: 'ghcr.io'
           username: ${{ github.actor}}
           password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true #push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tag_with_ref: true
          tags: ghcr.io/${{ github.repository }}/app:latest
